"""
app/models/audit_log.py

Defines the AuditLog model for ISREALAI Technologies.
Records user actions, system events, and sensitive changes for traceability.
"""

from datetime import datetime
from sqlalchemy import Enum
from app.extensions import db

# Optional: Uncomment below to use PostgreSQL JSONB field for structured metadata
# from sqlalchemy.dialects.postgresql import JSONB


class AuditLog(db.Model):
    """
    Represents an audit trail entry for accountability and diagnostics.
    Tracks who did what, when, from where, and why.
    """

    __tablename__ = "audit_logs"

    # Primary Key
    id = db.Column(db.Integer, primary_key=True)

    # Who triggered the event (nullable for system events)
    user_id = db.Column(db.Integer, db.ForeignKey("users.id"), nullable=True, index=True)
    user = db.relationship("User", backref="audit_logs")

    # What event occurred
    event_type = db.Column(
        Enum(
            "login", "logout", "password_reset", "email_change",
            "subscription_change", "profile_update", "admin_action", "system",
            name="audit_event_types"
        ),
        nullable=False
    )

    # Human-readable message explaining the event
    message = db.Column(db.String(255), nullable=False)

    # Optional structured or raw metadata about the event
    log_metadata = db.Column(db.Text, nullable=True)
    # log_metadata = db.Column(JSONB, nullable=True)  # Use this for PostgreSQL structured logs

    # Timestamp of the event (UTC)
    timestamp = db.Column(db.DateTime, default=datetime.utcnow, index=True)

    # Source IP address (IPv6-compatible)
    ip_address = db.Column(db.String(45), nullable=True)

    # Whether the event was generated by the system (vs user)
    is_system_event = db.Column(db.Boolean, default=False)

    def __repr__(self):
        who = f"user {self.user_id}" if self.user_id else "system"
        return f"<AuditLog {self.event_type} by {who} @ {self.timestamp}>"
